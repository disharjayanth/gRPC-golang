// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upperpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpperServiceClient is the client API for UpperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpperServiceClient interface {
	Upper(ctx context.Context, opts ...grpc.CallOption) (UpperService_UpperClient, error)
}

type upperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpperServiceClient(cc grpc.ClientConnInterface) UpperServiceClient {
	return &upperServiceClient{cc}
}

func (c *upperServiceClient) Upper(ctx context.Context, opts ...grpc.CallOption) (UpperService_UpperClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpperService_ServiceDesc.Streams[0], "/upperpb.UpperService/Upper", opts...)
	if err != nil {
		return nil, err
	}
	x := &upperServiceUpperClient{stream}
	return x, nil
}

type UpperService_UpperClient interface {
	Send(*UpperRequest) error
	CloseAndRecv() (*UpperResponse, error)
	grpc.ClientStream
}

type upperServiceUpperClient struct {
	grpc.ClientStream
}

func (x *upperServiceUpperClient) Send(m *UpperRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upperServiceUpperClient) CloseAndRecv() (*UpperResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpperResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpperServiceServer is the server API for UpperService service.
// All implementations must embed UnimplementedUpperServiceServer
// for forward compatibility
type UpperServiceServer interface {
	Upper(UpperService_UpperServer) error
	mustEmbedUnimplementedUpperServiceServer()
}

// UnimplementedUpperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpperServiceServer struct {
}

func (UnimplementedUpperServiceServer) Upper(UpperService_UpperServer) error {
	return status.Errorf(codes.Unimplemented, "method Upper not implemented")
}
func (UnimplementedUpperServiceServer) mustEmbedUnimplementedUpperServiceServer() {}

// UnsafeUpperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpperServiceServer will
// result in compilation errors.
type UnsafeUpperServiceServer interface {
	mustEmbedUnimplementedUpperServiceServer()
}

func RegisterUpperServiceServer(s grpc.ServiceRegistrar, srv UpperServiceServer) {
	s.RegisterService(&UpperService_ServiceDesc, srv)
}

func _UpperService_Upper_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpperServiceServer).Upper(&upperServiceUpperServer{stream})
}

type UpperService_UpperServer interface {
	SendAndClose(*UpperResponse) error
	Recv() (*UpperRequest, error)
	grpc.ServerStream
}

type upperServiceUpperServer struct {
	grpc.ServerStream
}

func (x *upperServiceUpperServer) SendAndClose(m *UpperResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upperServiceUpperServer) Recv() (*UpperRequest, error) {
	m := new(UpperRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpperService_ServiceDesc is the grpc.ServiceDesc for UpperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upperpb.UpperService",
	HandlerType: (*UpperServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upper",
			Handler:       _UpperService_Upper_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upper.proto",
}
