// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package greetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetEveryoneServiceClient is the client API for GreetEveryoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetEveryoneServiceClient interface {
	GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetEveryoneService_GreetEveryoneClient, error)
}

type greetEveryoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetEveryoneServiceClient(cc grpc.ClientConnInterface) GreetEveryoneServiceClient {
	return &greetEveryoneServiceClient{cc}
}

func (c *greetEveryoneServiceClient) GreetEveryone(ctx context.Context, opts ...grpc.CallOption) (GreetEveryoneService_GreetEveryoneClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetEveryoneService_ServiceDesc.Streams[0], "/greetpb.GreetEveryoneService/GreetEveryone", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetEveryoneServiceGreetEveryoneClient{stream}
	return x, nil
}

type GreetEveryoneService_GreetEveryoneClient interface {
	Send(*GreetEveryoneRequest) error
	Recv() (*GreetEveryoneResponse, error)
	grpc.ClientStream
}

type greetEveryoneServiceGreetEveryoneClient struct {
	grpc.ClientStream
}

func (x *greetEveryoneServiceGreetEveryoneClient) Send(m *GreetEveryoneRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetEveryoneServiceGreetEveryoneClient) Recv() (*GreetEveryoneResponse, error) {
	m := new(GreetEveryoneResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetEveryoneServiceServer is the server API for GreetEveryoneService service.
// All implementations must embed UnimplementedGreetEveryoneServiceServer
// for forward compatibility
type GreetEveryoneServiceServer interface {
	GreetEveryone(GreetEveryoneService_GreetEveryoneServer) error
	mustEmbedUnimplementedGreetEveryoneServiceServer()
}

// UnimplementedGreetEveryoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetEveryoneServiceServer struct {
}

func (UnimplementedGreetEveryoneServiceServer) GreetEveryone(GreetEveryoneService_GreetEveryoneServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetEveryone not implemented")
}
func (UnimplementedGreetEveryoneServiceServer) mustEmbedUnimplementedGreetEveryoneServiceServer() {}

// UnsafeGreetEveryoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetEveryoneServiceServer will
// result in compilation errors.
type UnsafeGreetEveryoneServiceServer interface {
	mustEmbedUnimplementedGreetEveryoneServiceServer()
}

func RegisterGreetEveryoneServiceServer(s grpc.ServiceRegistrar, srv GreetEveryoneServiceServer) {
	s.RegisterService(&GreetEveryoneService_ServiceDesc, srv)
}

func _GreetEveryoneService_GreetEveryone_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetEveryoneServiceServer).GreetEveryone(&greetEveryoneServiceGreetEveryoneServer{stream})
}

type GreetEveryoneService_GreetEveryoneServer interface {
	Send(*GreetEveryoneResponse) error
	Recv() (*GreetEveryoneRequest, error)
	grpc.ServerStream
}

type greetEveryoneServiceGreetEveryoneServer struct {
	grpc.ServerStream
}

func (x *greetEveryoneServiceGreetEveryoneServer) Send(m *GreetEveryoneResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetEveryoneServiceGreetEveryoneServer) Recv() (*GreetEveryoneRequest, error) {
	m := new(GreetEveryoneRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetEveryoneService_ServiceDesc is the grpc.ServiceDesc for GreetEveryoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetEveryoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greetpb.GreetEveryoneService",
	HandlerType: (*GreetEveryoneServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetEveryone",
			Handler:       _GreetEveryoneService_GreetEveryone_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greet.proto",
}
