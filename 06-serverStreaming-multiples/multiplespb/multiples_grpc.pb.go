// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multiplespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplesServiceClient is the client API for MultiplesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplesServiceClient interface {
	Multiples(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (MultiplesService_MultiplesClient, error)
}

type multiplesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplesServiceClient(cc grpc.ClientConnInterface) MultiplesServiceClient {
	return &multiplesServiceClient{cc}
}

func (c *multiplesServiceClient) Multiples(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (MultiplesService_MultiplesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultiplesService_ServiceDesc.Streams[0], "/multiplespb.MultiplesService/Multiples", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiplesServiceMultiplesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultiplesService_MultiplesClient interface {
	Recv() (*MultiplesResponse, error)
	grpc.ClientStream
}

type multiplesServiceMultiplesClient struct {
	grpc.ClientStream
}

func (x *multiplesServiceMultiplesClient) Recv() (*MultiplesResponse, error) {
	m := new(MultiplesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiplesServiceServer is the server API for MultiplesService service.
// All implementations must embed UnimplementedMultiplesServiceServer
// for forward compatibility
type MultiplesServiceServer interface {
	Multiples(*MultiplesRequest, MultiplesService_MultiplesServer) error
	mustEmbedUnimplementedMultiplesServiceServer()
}

// UnimplementedMultiplesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplesServiceServer struct {
}

func (UnimplementedMultiplesServiceServer) Multiples(*MultiplesRequest, MultiplesService_MultiplesServer) error {
	return status.Errorf(codes.Unimplemented, "method Multiples not implemented")
}
func (UnimplementedMultiplesServiceServer) mustEmbedUnimplementedMultiplesServiceServer() {}

// UnsafeMultiplesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplesServiceServer will
// result in compilation errors.
type UnsafeMultiplesServiceServer interface {
	mustEmbedUnimplementedMultiplesServiceServer()
}

func RegisterMultiplesServiceServer(s grpc.ServiceRegistrar, srv MultiplesServiceServer) {
	s.RegisterService(&MultiplesService_ServiceDesc, srv)
}

func _MultiplesService_Multiples_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiplesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiplesServiceServer).Multiples(m, &multiplesServiceMultiplesServer{stream})
}

type MultiplesService_MultiplesServer interface {
	Send(*MultiplesResponse) error
	grpc.ServerStream
}

type multiplesServiceMultiplesServer struct {
	grpc.ServerStream
}

func (x *multiplesServiceMultiplesServer) Send(m *MultiplesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MultiplesService_ServiceDesc is the grpc.ServiceDesc for MultiplesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiplesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiplespb.MultiplesService",
	HandlerType: (*MultiplesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multiples",
			Handler:       _MultiplesService_Multiples_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "multiples.proto",
}
