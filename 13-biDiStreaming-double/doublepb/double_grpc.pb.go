// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package doublepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoubleServiceClient is the client API for DoubleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoubleServiceClient interface {
	Double(ctx context.Context, opts ...grpc.CallOption) (DoubleService_DoubleClient, error)
}

type doubleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoubleServiceClient(cc grpc.ClientConnInterface) DoubleServiceClient {
	return &doubleServiceClient{cc}
}

func (c *doubleServiceClient) Double(ctx context.Context, opts ...grpc.CallOption) (DoubleService_DoubleClient, error) {
	stream, err := c.cc.NewStream(ctx, &DoubleService_ServiceDesc.Streams[0], "/doublepb.DoubleService/Double", opts...)
	if err != nil {
		return nil, err
	}
	x := &doubleServiceDoubleClient{stream}
	return x, nil
}

type DoubleService_DoubleClient interface {
	Send(*DoubleRequest) error
	Recv() (*DoubleResponse, error)
	grpc.ClientStream
}

type doubleServiceDoubleClient struct {
	grpc.ClientStream
}

func (x *doubleServiceDoubleClient) Send(m *DoubleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *doubleServiceDoubleClient) Recv() (*DoubleResponse, error) {
	m := new(DoubleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoubleServiceServer is the server API for DoubleService service.
// All implementations must embed UnimplementedDoubleServiceServer
// for forward compatibility
type DoubleServiceServer interface {
	Double(DoubleService_DoubleServer) error
	mustEmbedUnimplementedDoubleServiceServer()
}

// UnimplementedDoubleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoubleServiceServer struct {
}

func (UnimplementedDoubleServiceServer) Double(DoubleService_DoubleServer) error {
	return status.Errorf(codes.Unimplemented, "method Double not implemented")
}
func (UnimplementedDoubleServiceServer) mustEmbedUnimplementedDoubleServiceServer() {}

// UnsafeDoubleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoubleServiceServer will
// result in compilation errors.
type UnsafeDoubleServiceServer interface {
	mustEmbedUnimplementedDoubleServiceServer()
}

func RegisterDoubleServiceServer(s grpc.ServiceRegistrar, srv DoubleServiceServer) {
	s.RegisterService(&DoubleService_ServiceDesc, srv)
}

func _DoubleService_Double_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DoubleServiceServer).Double(&doubleServiceDoubleServer{stream})
}

type DoubleService_DoubleServer interface {
	Send(*DoubleResponse) error
	Recv() (*DoubleRequest, error)
	grpc.ServerStream
}

type doubleServiceDoubleServer struct {
	grpc.ServerStream
}

func (x *doubleServiceDoubleServer) Send(m *DoubleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *doubleServiceDoubleServer) Recv() (*DoubleRequest, error) {
	m := new(DoubleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DoubleService_ServiceDesc is the grpc.ServiceDesc for DoubleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoubleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doublepb.DoubleService",
	HandlerType: (*DoubleServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Double",
			Handler:       _DoubleService_Double_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "double.proto",
}
